(function (extension, common) {
  'use strict';

  function updateActivity() {
    let settings = extension.persist.ghost.settings || {};
    let activity = {
      name: settings.name || "Acord",
      application_id: settings.application_id,
      type: settings.type || 0,
      flags: 1,
      details: settings.details || "discord.gg/acord",
      state: settings.state || "Acord"
    };
    if (settings.button_1_text || settings.button_2_text) {
      activity.buttons = [
        settings.button_1_text?.trim(),
        settings.button_2_text?.trim()
      ].filter((x) => x);
      activity.metadata = {
        button_urls: [
          settings.button_1_url?.trim(),
          settings.button_2_url?.trim()
        ].filter((x) => x)
      };
    }
    if (typeof settings.start_timestamp !== "undefined" || typeof settings.end_timestamp !== "undefined") {
      activity.timestamps = {
        start: settings.start_timestamp || void 0,
        end: settings.end_timestamp || void 0
      };
    }
    if (settings.large_image || settings.small_image) {
      activity.assets = {
        large_image: settings.large_image,
        large_text: settings.large_text || void 0,
        small_image: settings.small_image,
        small_text: settings.small_text || void 0
      };
    }
    common.FluxDispatcher.dispatch({
      type: "LOCAL_ACTIVITY_UPDATE",
      activity,
      socketId: "rest.armagan.acord"
    });
  }
  const debouncedUpdateActivity = _.debounce(updateActivity, 2500);
  var index = {
    load() {
      updateActivity();
    },
    unload() {
      common.FluxDispatcher.dispatch({
        type: "LOCAL_ACTIVITY_UPDATE",
        activity: {},
        socketId: "rest.armagan.acord"
      });
    },
    config() {
      debouncedUpdateActivity();
    }
  };

  return index;

})($acord.extension, $acord.modules.common);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Vic2NyaXB0aW9ucywgcGVyc2lzdCB9IGZyb20gXCJAYWNvcmQvZXh0ZW5zaW9uXCI7XHJcbmltcG9ydCB7IEZsdXhEaXNwYXRjaGVyIH0gZnJvbSBcIkBhY29yZC9tb2R1bGVzL2NvbW1vblwiO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlQWN0aXZpdHkoKSB7XHJcbiAgbGV0IHNldHRpbmdzID0gcGVyc2lzdC5naG9zdC5zZXR0aW5ncyB8fCB7fTtcclxuXHJcbiAgbGV0IGFjdGl2aXR5ID0ge1xyXG4gICAgbmFtZTogc2V0dGluZ3MubmFtZSB8fCBcIkFjb3JkXCIsXHJcbiAgICBhcHBsaWNhdGlvbl9pZDogc2V0dGluZ3MuYXBwbGljYXRpb25faWQsXHJcbiAgICB0eXBlOiBzZXR0aW5ncy50eXBlIHx8IDAsXHJcbiAgICBmbGFnczogMSxcclxuICAgIGRldGFpbHM6IHNldHRpbmdzLmRldGFpbHMgfHwgXCJkaXNjb3JkLmdnL2Fjb3JkXCIsXHJcbiAgICBzdGF0ZTogc2V0dGluZ3Muc3RhdGUgfHwgXCJBY29yZFwiLFxyXG4gIH07XHJcblxyXG4gIGlmIChzZXR0aW5ncy5idXR0b25fMV90ZXh0IHx8IHNldHRpbmdzLmJ1dHRvbl8yX3RleHQpIHtcclxuICAgIGFjdGl2aXR5LmJ1dHRvbnMgPSBbXHJcbiAgICAgIHNldHRpbmdzLmJ1dHRvbl8xX3RleHQ/LnRyaW0oKSxcclxuICAgICAgc2V0dGluZ3MuYnV0dG9uXzJfdGV4dD8udHJpbSgpLFxyXG4gICAgXS5maWx0ZXIoKHgpID0+IHgpO1xyXG5cclxuICAgIGFjdGl2aXR5Lm1ldGFkYXRhID0ge1xyXG4gICAgICBidXR0b25fdXJsczogW1xyXG4gICAgICAgIHNldHRpbmdzLmJ1dHRvbl8xX3VybD8udHJpbSgpLFxyXG4gICAgICAgIHNldHRpbmdzLmJ1dHRvbl8yX3VybD8udHJpbSgpLFxyXG4gICAgICBdLmZpbHRlcigoeCkgPT4geCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBzZXR0aW5ncy5zdGFydF90aW1lc3RhbXAgIT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIHNldHRpbmdzLmVuZF90aW1lc3RhbXAgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIGFjdGl2aXR5LnRpbWVzdGFtcHMgPSB7XHJcbiAgICAgIHN0YXJ0OiBzZXR0aW5ncy5zdGFydF90aW1lc3RhbXAgfHwgdW5kZWZpbmVkLFxyXG4gICAgICBlbmQ6IHNldHRpbmdzLmVuZF90aW1lc3RhbXAgfHwgdW5kZWZpbmVkLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGlmIChzZXR0aW5ncy5sYXJnZV9pbWFnZSB8fCBzZXR0aW5ncy5zbWFsbF9pbWFnZSkge1xyXG4gICAgYWN0aXZpdHkuYXNzZXRzID0ge1xyXG4gICAgICBsYXJnZV9pbWFnZTogc2V0dGluZ3MubGFyZ2VfaW1hZ2UsXHJcbiAgICAgIGxhcmdlX3RleHQ6IHNldHRpbmdzLmxhcmdlX3RleHQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICBzbWFsbF9pbWFnZTogc2V0dGluZ3Muc21hbGxfaW1hZ2UsXHJcbiAgICAgIHNtYWxsX3RleHQ6IHNldHRpbmdzLnNtYWxsX3RleHQgfHwgdW5kZWZpbmVkLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIEZsdXhEaXNwYXRjaGVyLmRpc3BhdGNoKHtcclxuICAgIHR5cGU6IFwiTE9DQUxfQUNUSVZJVFlfVVBEQVRFXCIsXHJcbiAgICBhY3Rpdml0eSxcclxuICAgIHNvY2tldElkOiBcInJlc3QuYXJtYWdhbi5hY29yZFwiLFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBkZWJvdW5jZWRVcGRhdGVBY3Rpdml0eSA9IF8uZGVib3VuY2UodXBkYXRlQWN0aXZpdHksIDI1MDApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxvYWQoKSB7XHJcbiAgICB1cGRhdGVBY3Rpdml0eSgpO1xyXG4gIH0sXHJcbiAgdW5sb2FkKCkge1xyXG4gICAgRmx1eERpc3BhdGNoZXIuZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiBcIkxPQ0FMX0FDVElWSVRZX1VQREFURVwiLFxyXG4gICAgICBhY3Rpdml0eToge30sXHJcbiAgICAgIHNvY2tldElkOiBcInJlc3QuYXJtYWdhbi5hY29yZFwiXHJcbiAgICB9KTtcclxuICB9LFxyXG4gIGNvbmZpZygpIHtcclxuICAgIGRlYm91bmNlZFVwZGF0ZUFjdGl2aXR5KCk7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbInBlcnNpc3QiLCJGbHV4RGlzcGF0Y2hlciJdLCJtYXBwaW5ncyI6Ijs7O0VBRUEsU0FBUyxjQUFjLEdBQUc7RUFDMUIsRUFBRSxJQUFJLFFBQVEsR0FBR0EsaUJBQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztFQUM5QyxFQUFFLElBQUksUUFBUSxHQUFHO0VBQ2pCLElBQUksSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLElBQUksT0FBTztFQUNsQyxJQUFJLGNBQWMsRUFBRSxRQUFRLENBQUMsY0FBYztFQUMzQyxJQUFJLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUM7RUFDNUIsSUFBSSxLQUFLLEVBQUUsQ0FBQztFQUNaLElBQUksT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPLElBQUksa0JBQWtCO0VBQ25ELElBQUksS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLElBQUksT0FBTztFQUNwQyxHQUFHLENBQUM7RUFDSixFQUFFLElBQUksUUFBUSxDQUFDLGFBQWEsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFO0VBQ3hELElBQUksUUFBUSxDQUFDLE9BQU8sR0FBRztFQUN2QixNQUFNLFFBQVEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFO0VBQ3BDLE1BQU0sUUFBUSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUU7RUFDcEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUN2QixJQUFJLFFBQVEsQ0FBQyxRQUFRLEdBQUc7RUFDeEIsTUFBTSxXQUFXLEVBQUU7RUFDbkIsUUFBUSxRQUFRLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRTtFQUNyQyxRQUFRLFFBQVEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFO0VBQ3JDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQ3hCLEtBQUssQ0FBQztFQUNOLEdBQUc7RUFDSCxFQUFFLElBQUksT0FBTyxRQUFRLENBQUMsZUFBZSxLQUFLLFdBQVcsSUFBSSxPQUFPLFFBQVEsQ0FBQyxhQUFhLEtBQUssV0FBVyxFQUFFO0VBQ3hHLElBQUksUUFBUSxDQUFDLFVBQVUsR0FBRztFQUMxQixNQUFNLEtBQUssRUFBRSxRQUFRLENBQUMsZUFBZSxJQUFJLEtBQUssQ0FBQztFQUMvQyxNQUFNLEdBQUcsRUFBRSxRQUFRLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQztFQUMzQyxLQUFLLENBQUM7RUFDTixHQUFHO0VBQ0gsRUFBRSxJQUFJLFFBQVEsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtFQUNwRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUc7RUFDdEIsTUFBTSxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVc7RUFDdkMsTUFBTSxVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUM7RUFDL0MsTUFBTSxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVc7RUFDdkMsTUFBTSxVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVUsSUFBSSxLQUFLLENBQUM7RUFDL0MsS0FBSyxDQUFDO0VBQ04sR0FBRztFQUNILEVBQUVDLHFCQUFjLENBQUMsUUFBUSxDQUFDO0VBQzFCLElBQUksSUFBSSxFQUFFLHVCQUF1QjtFQUNqQyxJQUFJLFFBQVE7RUFDWixJQUFJLFFBQVEsRUFBRSxvQkFBb0I7RUFDbEMsR0FBRyxDQUFDLENBQUM7RUFDTCxDQUFDO0VBQ0QsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNqRSxjQUFlO0VBQ2YsRUFBRSxJQUFJLEdBQUc7RUFDVCxJQUFJLGNBQWMsRUFBRSxDQUFDO0VBQ3JCLEdBQUc7RUFDSCxFQUFFLE1BQU0sR0FBRztFQUNYLElBQUlBLHFCQUFjLENBQUMsUUFBUSxDQUFDO0VBQzVCLE1BQU0sSUFBSSxFQUFFLHVCQUF1QjtFQUNuQyxNQUFNLFFBQVEsRUFBRSxFQUFFO0VBQ2xCLE1BQU0sUUFBUSxFQUFFLG9CQUFvQjtFQUNwQyxLQUFLLENBQUMsQ0FBQztFQUNQLEdBQUc7RUFDSCxFQUFFLE1BQU0sR0FBRztFQUNYLElBQUksdUJBQXVCLEVBQUUsQ0FBQztFQUM5QixHQUFHO0VBQ0gsQ0FBQzs7Ozs7Ozs7In0=
