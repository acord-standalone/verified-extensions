(function (extension, common, events) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var events__default = /*#__PURE__*/_interopDefaultLegacy(events);

  function updateActivity() {
    let settings = extension.persist.ghost.settings || {};
    let activity = {
      name: settings.name || "Acord",
      application_id: settings.application_id,
      type: settings.type || 0,
      flags: 1,
      details: settings.details,
      state: settings.state
    };
    if (settings.button_1_text || settings.button_2_text) {
      activity.buttons = [
        settings.button_1_text?.trim(),
        settings.button_2_text?.trim()
      ].filter((x) => x);
      activity.metadata = {
        button_urls: [
          settings.button_1_url?.trim(),
          settings.button_2_url?.trim()
        ].filter((x) => x)
      };
    }
    if (typeof settings.start_timestamp !== "undefined" || typeof settings.end_timestamp !== "undefined") {
      activity.timestamps = {
        start: settings.start_timestamp ? Number(settings.start_timestamp) : void 0,
        end: settings.start_timestamp ? Number(settings.end_timestamp) : void 0
      };
    }
    if (settings.large_image || settings.small_image) {
      activity.assets = {
        large_image: settings.large_image,
        large_text: settings.large_text || void 0,
        small_image: settings.small_image,
        small_text: settings.small_text || void 0
      };
    }
    common.FluxDispatcher.dispatch({
      type: "LOCAL_ACTIVITY_UPDATE",
      activity,
      socketId: "rest.armagan.acord"
    });
  }
  const debouncedUpdateActivity = _.debounce(updateActivity, 2500);
  var index = {
    load() {
      updateActivity();
      extension.subscriptions.push(
        events__default["default"].on("CurrentUserChange", updateActivity)
      );
    },
    unload() {
      common.FluxDispatcher.dispatch({
        type: "LOCAL_ACTIVITY_UPDATE",
        activity: {},
        socketId: "rest.armagan.acord"
      });
    },
    config() {
      debouncedUpdateActivity();
    }
  };

  return index;

})($acord.extension, $acord.modules.common, $acord.events);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Vic2NyaXB0aW9ucywgcGVyc2lzdCB9IGZyb20gXCJAYWNvcmQvZXh0ZW5zaW9uXCI7XHJcbmltcG9ydCB7IEZsdXhEaXNwYXRjaGVyIH0gZnJvbSBcIkBhY29yZC9tb2R1bGVzL2NvbW1vblwiO1xyXG5pbXBvcnQgZXZlbnRzIGZyb20gXCJAYWNvcmQvZXZlbnRzXCI7XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVBY3Rpdml0eSgpIHtcclxuICBsZXQgc2V0dGluZ3MgPSBwZXJzaXN0Lmdob3N0LnNldHRpbmdzIHx8IHt9O1xyXG5cclxuICBsZXQgYWN0aXZpdHkgPSB7XHJcbiAgICBuYW1lOiBzZXR0aW5ncy5uYW1lIHx8IFwiQWNvcmRcIixcclxuICAgIGFwcGxpY2F0aW9uX2lkOiBzZXR0aW5ncy5hcHBsaWNhdGlvbl9pZCxcclxuICAgIHR5cGU6IHNldHRpbmdzLnR5cGUgfHwgMCxcclxuICAgIGZsYWdzOiAxLFxyXG4gICAgZGV0YWlsczogc2V0dGluZ3MuZGV0YWlscyxcclxuICAgIHN0YXRlOiBzZXR0aW5ncy5zdGF0ZSxcclxuICB9O1xyXG5cclxuICBpZiAoc2V0dGluZ3MuYnV0dG9uXzFfdGV4dCB8fCBzZXR0aW5ncy5idXR0b25fMl90ZXh0KSB7XHJcbiAgICBhY3Rpdml0eS5idXR0b25zID0gW1xyXG4gICAgICBzZXR0aW5ncy5idXR0b25fMV90ZXh0Py50cmltKCksXHJcbiAgICAgIHNldHRpbmdzLmJ1dHRvbl8yX3RleHQ/LnRyaW0oKSxcclxuICAgIF0uZmlsdGVyKCh4KSA9PiB4KTtcclxuXHJcbiAgICBhY3Rpdml0eS5tZXRhZGF0YSA9IHtcclxuICAgICAgYnV0dG9uX3VybHM6IFtcclxuICAgICAgICBzZXR0aW5ncy5idXR0b25fMV91cmw/LnRyaW0oKSxcclxuICAgICAgICBzZXR0aW5ncy5idXR0b25fMl91cmw/LnRyaW0oKSxcclxuICAgICAgXS5maWx0ZXIoKHgpID0+IHgpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2Ygc2V0dGluZ3Muc3RhcnRfdGltZXN0YW1wICE9PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBzZXR0aW5ncy5lbmRfdGltZXN0YW1wICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICBhY3Rpdml0eS50aW1lc3RhbXBzID0ge1xyXG4gICAgICBzdGFydDogc2V0dGluZ3Muc3RhcnRfdGltZXN0YW1wID8gTnVtYmVyKHNldHRpbmdzLnN0YXJ0X3RpbWVzdGFtcCkgOiB1bmRlZmluZWQsXHJcbiAgICAgIGVuZDogc2V0dGluZ3Muc3RhcnRfdGltZXN0YW1wID8gTnVtYmVyKHNldHRpbmdzLmVuZF90aW1lc3RhbXApIDogdW5kZWZpbmVkLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGlmIChzZXR0aW5ncy5sYXJnZV9pbWFnZSB8fCBzZXR0aW5ncy5zbWFsbF9pbWFnZSkge1xyXG4gICAgYWN0aXZpdHkuYXNzZXRzID0ge1xyXG4gICAgICBsYXJnZV9pbWFnZTogc2V0dGluZ3MubGFyZ2VfaW1hZ2UsXHJcbiAgICAgIGxhcmdlX3RleHQ6IHNldHRpbmdzLmxhcmdlX3RleHQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICBzbWFsbF9pbWFnZTogc2V0dGluZ3Muc21hbGxfaW1hZ2UsXHJcbiAgICAgIHNtYWxsX3RleHQ6IHNldHRpbmdzLnNtYWxsX3RleHQgfHwgdW5kZWZpbmVkLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIEZsdXhEaXNwYXRjaGVyLmRpc3BhdGNoKHtcclxuICAgIHR5cGU6IFwiTE9DQUxfQUNUSVZJVFlfVVBEQVRFXCIsXHJcbiAgICBhY3Rpdml0eSxcclxuICAgIHNvY2tldElkOiBcInJlc3QuYXJtYWdhbi5hY29yZFwiLFxyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBkZWJvdW5jZWRVcGRhdGVBY3Rpdml0eSA9IF8uZGVib3VuY2UodXBkYXRlQWN0aXZpdHksIDI1MDApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGxvYWQoKSB7XHJcbiAgICB1cGRhdGVBY3Rpdml0eSgpO1xyXG5cclxuICAgIHN1YnNjcmlwdGlvbnMucHVzaChcclxuICAgICAgZXZlbnRzLm9uKFwiQ3VycmVudFVzZXJDaGFuZ2VcIiwgdXBkYXRlQWN0aXZpdHkpXHJcbiAgICApO1xyXG4gIH0sXHJcbiAgdW5sb2FkKCkge1xyXG4gICAgRmx1eERpc3BhdGNoZXIuZGlzcGF0Y2goe1xyXG4gICAgICB0eXBlOiBcIkxPQ0FMX0FDVElWSVRZX1VQREFURVwiLFxyXG4gICAgICBhY3Rpdml0eToge30sXHJcbiAgICAgIHNvY2tldElkOiBcInJlc3QuYXJtYWdhbi5hY29yZFwiXHJcbiAgICB9KTtcclxuICB9LFxyXG4gIGNvbmZpZygpIHtcclxuICAgIGRlYm91bmNlZFVwZGF0ZUFjdGl2aXR5KCk7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbInBlcnNpc3QiLCJGbHV4RGlzcGF0Y2hlciIsInN1YnNjcmlwdGlvbnMiLCJldmVudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7RUFHQSxTQUFTLGNBQWMsR0FBRztFQUMxQixFQUFFLElBQUksUUFBUSxHQUFHQSxpQkFBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO0VBQzlDLEVBQUUsSUFBSSxRQUFRLEdBQUc7RUFDakIsSUFBSSxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksSUFBSSxPQUFPO0VBQ2xDLElBQUksY0FBYyxFQUFFLFFBQVEsQ0FBQyxjQUFjO0VBQzNDLElBQUksSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQztFQUM1QixJQUFJLEtBQUssRUFBRSxDQUFDO0VBQ1osSUFBSSxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU87RUFDN0IsSUFBSSxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7RUFDekIsR0FBRyxDQUFDO0VBQ0osRUFBRSxJQUFJLFFBQVEsQ0FBQyxhQUFhLElBQUksUUFB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
