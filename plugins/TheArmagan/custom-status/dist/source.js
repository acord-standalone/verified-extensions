(function (extension, common, events, utils, ui) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var events__default = /*#__PURE__*/_interopDefaultLegacy(events);
  var utils__default = /*#__PURE__*/_interopDefaultLegacy(utils);
  var ui__default = /*#__PURE__*/_interopDefaultLegacy(ui);

  let checkVar = null;
  let assets = [];
  const cdnRegexTest = /https?:\/\/(cdn|media)\.discordapp\.(com|net)\/attachments\//;
  const cdnRegexReplace = /https?:\/\/(cdn|media)\.discordapp\.(com|net)\//;
  function getAsset(key) {
    if (cdnRegexTest.test(key))
      return `mp:${key.replace(cdnRegexReplace, "")}`;
    return assets.find((i) => i.name === key)?.id || key;
  }
  async function updateActivity() {
    let settings = extension.persist.ghost.settings || {};
    if (checkVar !== `${settings.application_id}-${settings.large_image || ""}-${settings.small_image || ""}`) {
      checkVar = `${settings.application_id}-${settings.large_image || ""}-${settings.small_image || ""}`;
      let req = await fetch(`https://discord.com/api/oauth2/applications/${settings.application_id}/assets`);
      if (req.ok) {
        assets = await req.json();
      } else {
        ui__default["default"].toasts.show.error("[Custom Status] Invalid application id.");
      }
    }
    let activity = {
      name: settings.name || "Acord",
      application_id: settings.application_id,
      type: settings.type || 0,
      flags: 1,
      details: settings.details,
      state: settings.state
    };
    if (settings.button_1_text || settings.button_2_text) {
      activity.buttons = [
        settings.button_1_text?.trim(),
        settings.button_2_text?.trim()
      ].filter((x) => x);
      activity.metadata = {
        button_urls: [
          settings.button_1_url?.trim(),
          settings.button_2_url?.trim()
        ].filter((x) => x)
      };
    }
    if (typeof settings.start_timestamp !== "undefined" || typeof settings.end_timestamp !== "undefined") {
      activity.timestamps = {
        start: settings.start_timestamp?.trim() ? Number(settings.start_timestamp.trim()) : void 0,
        end: settings.end_timestamp?.trim() ? Number(settings.end_timestamp.trim()) : void 0
      };
    }
    if (assets.length && (settings.large_image || settings.small_image)) {
      activity.assets = {};
      if (settings.large_image) {
        activity.assets.large_image = getAsset(settings.large_image);
        activity.assets.large_text = settings.large_text || void 0;
      }
      if (settings.small_image) {
        activity.assets.small_image = getAsset(settings.small_image);
        activity.assets.small_text = settings.small_text || void 0;
      }
    }
    common.FluxDispatcher.dispatch({
      type: "LOCAL_ACTIVITY_UPDATE",
      activity,
      socketId: "rest.armagan.acord"
    });
  }
  const debouncedUpdateActivity = _.debounce(updateActivity, 2500);
  var index = {
    load() {
      updateActivity();
      extension.subscriptions.push(
        events__default["default"].on("CurrentUserChange", updateActivity),
        utils__default["default"].interval(updateActivity, 5e3)
      );
    },
    unload() {
      common.FluxDispatcher.dispatch({
        type: "LOCAL_ACTIVITY_UPDATE",
        activity: {},
        socketId: "rest.armagan.acord"
      });
      checkVar = null;
      assets = [];
    },
    config() {
      debouncedUpdateActivity();
    }
  };

  return index;

})($acord.extension, $acord.modules.common, $acord.events, $acord.utils, $acord.ui);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
